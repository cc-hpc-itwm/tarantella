#!/usr/bin/env python
import logging
import os
import signal
import sys

def signal_handler(signal, frame):
  print(f"Cleaning up and exiting Tarantella process on {os.uname().nodename}")
  sys.exit(0)
signal.signal(signal.SIGTERM, signal_handler)

TNT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LIB_DIR = os.path.join(TNT_DIR, "lib/tarantella")
PYLIB_DIR = os.path.join(TNT_DIR, "lib/tarantella/python")
sys.path.insert(0, LIB_DIR)
sys.path.insert(0, PYLIB_DIR)
try:
  import runtime
except ModuleNotFoundError as e:
  raise RuntimeError("[TNT_CLI] Cannot find Tarantella `runtime` module; \
make sure the `tarantella` script is started from an installed version.") from e

import runtime.logging_config as logging_config
import runtime.platform_config as platform_config
import runtime.environment_config as env_config
from runtime.tarantella_cli import parse_args
from runtime.tarantella_cli import TarantellaCLI
from runtime import logger

if __name__ == "__main__":
  args = parse_args()
  logging_config.setup_logging(logger, args.log_level)

  nodes_list = platform_config.generate_nodes_list(args.hostfile)
  num_gpus, num_cpus = platform_config.generate_num_devices_per_node(npernode = args.npernode,
                                                                     use_gpus = args.use_gpus)
  env_config.add_dependencies_to_environment_paths()
  env_config.add_tnt_to_environment_paths(LIB_DIR)

  tarantella = TarantellaCLI(nodes_list, num_gpus, num_cpus, args)
  tarantella.run()
